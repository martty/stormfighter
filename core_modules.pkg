class Logger{
 public:
  void logMessage(const SString& message);
};

class Graphics {
 public:

  /// Set light used for lighting terrain
  void setTerrainLight(Ogre::Light* light);

  /// Set Camera to render on the default viewport
  void setActiveCamera(Ogre::Camera* camera);
  /// Get Camera of the default viewport
  Ogre::Camera* activeCamera() const;

  /// Get aspect ratio of default viewport
  Ogre::Real getDefaultAspectRatio();

  /// Get default viewport
  Ogre::Viewport* defaultViewport() const;

  /// Get default renderwindow (for stats)
  Ogre::RenderWindow* defaultRenderWindow() const;

  /// Get SceneManager
  Ogre::SceneManager* sceneManager() const;
};

struct CollisionData {
  Ogre::Vector3 pointOnA;
  Ogre::Vector3 pointOnB;
  Ogre::Vector3 normalOnB;

  bool stale;
  bool fresh;

  GameObject* other;
};

struct SingleRayCastResult {
  GameObject* hitObject;
  Ogre::Vector3 hitPoint;
};

typedef std::map<SString, short> MaskMap;

class Physics {
 public:
  void tick(SReal deltaTime);
  /// Add a rigidbody to the simulation
  void addRigidBody(btRigidBody* rigidBody);

  void addRigidBody(btRigidBody* rigidBody, SString group, StringVector collidesWith);

  void removeRigidBody(btRigidBody* rigidBody);

  void addCollisionGroup(SString name);

  SingleRayCastResult closestRayCast(Ogre::Vector3 from, Ogre::Vector3 to);

  void setDebugDraw(bool draw);
};

class Input {
 enum Axis {X, Y, Z};
 public:
  void capture();

  bool isKeyDown(const OIS::KeyCode key);
  bool isButtonDown(const OIS::MouseButtonID button);

  int axisRelative(Axis axis);
  int axisAbsolute(Axis axis);
};

class GUI  {
 public:
  void update(double deltaTime);
};

typedef std::vector<GameObject*> GameObjectList;

class Hierarchy {
 public:
  void update();
  /// Searches for GO with given name in hierarchy (BFS)
  GameObject* find(SString name);

  GameObject* createGameObject(SString name);
  GameObject* createGameObject();

  void destroyGameObject(SString name);
  void destroyGameObject(GameObject* gameObject);


  /// Returns the whole hierarchy (DFS)
  SString debug();
};
