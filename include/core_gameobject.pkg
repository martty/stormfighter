typedef std::map<SString, Component*> ComponentMap ;
typedef std::map<SString, int> NameCountMap;
typedef std::map<unsigned int, std::vector<Component*> > CallsMap;
typedef std::vector<Component*> ComponentVector;
typedef std::map<SString, CollisionData*> CollisionMap;

/**
 *@brief Generic parent class for all GameObject
 *
 * Suggested abbroviation: GO, :)
 */
class GameObject {
 public:
  virtual ~GameObject(); /// Delete GameObject
  const SString& name() const;

  SString debug();
  GameObject* clone(); /// Creates a clone, with the name current_GO_name_clone_n
  GameObject* clone(SString name); /// Creates a clone with name

  // Components
  void addComponent(Component* component);   /// Add's component to GameObject's component map
  ComponentVector allComponents(); /// Returns all components in this GameObject
  Component* component(const SString& type); /// Returns component with given type
  bool hasComponent(const SString& type) const;   /// Returns true if GameObject has component with type "type"
  Transform* transform();   /// Returns the transform component of the GameObject, alias for component("Transform")

  // Advanced components
  Component* firstComponentInChildren(const SString& type); /// Get the first component of type, searched first in this GameObject, then children
  ComponentVector allComponentInChildren(const SString& type); /// Get all components of type, searched first in this GameObject, then children

  // Game object list managament
  ///Add equal level member to GameObject list
  void addSibling(GameObject* go);
  ///Add children(lower in hierarchy) member to GameObject list
  void addChild(GameObject* go);
  /// Set parent GameObject
  void setParent(GameObject* go);
  /// Sets the root as this GameObjects's parent
  void reParent();
  GameObject* parent(); /// Parent of this GameObject

  GameObjectList children(); /// Returns all children of this GameObject

  ///Find object with given name
  GameObject* find(const SString& name);
  ///Find object
  GameObject* find(const GameObject* go);

  ///Destroy all children (call their destructors)
  void clearChildren();

  SAxisAlignedBox getBoundingBox();

  SString serialiseJSON(bool recursive);

  // Tagging
  /// add tag to GO
  void addTag(SString tag);
  /// remove tag from GO
  void removeTag(SString tag);
  /// check for tag on GO
  bool hasTag(SString tag);
  /// get all tags from GO
  StringVector tags();
};
