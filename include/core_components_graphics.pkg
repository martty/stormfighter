class Component{
 public:
  Component();
  ~Component();

  const SString type() const = 0;

  Component* clone() const = 0;

  void onInit();

  void onUpdate();

  void onPhysicsUpdate();

  void onCollisionEnter(const CollisionData* collisionData);
  void onCollisionExit(const CollisionData* collisionData);
  void onCollisionStay(const CollisionData* collisionData);

  enum State {CREATED, PREPARED, READY};

  State state() const;

  enum Calls {
    NONE = 0, // No calls needed
    INIT = 1, // needs onInit called
    UPDATE = 2, // needs onUpdate called
    PHYSICS_UPDATE = 4, // needs onPhysicsUpdate called
    COLLISION = 8 // needs onCollision called TODO: collision helyett simple_collision, adv_collision..?
  };

  GameObject* object() const;
  StormfighterApp* application() const;
};


class STransform : public Component {
 public:
  ~STransform();

  /// The Transform component's type string is @b "Transform"
  const SString type() const;

  // POSITION, ORIENTATION, SCALE (local space)
  SVector3 position() const;
  SQuaternion orientation() const;
  SVector3 scale() const;

  void setPosition(const SVector3 position);
  void setOrientation(const SQuaternion orientation);
  void setScale(const SVector3 scale){node_->setScale(scale);}

  Ogre::Matrix4 worldMatrix() const;

  // POSITION, ORIENTATION (world space)
  SVector3 worldPosition() const;
  SQuaternion worldOrientation() const;

  // ADVANCED TRANSFORMS

  void lookAt(const SVector3 position); /// worldspace, -z (like camera lookAt)

  void move(const SVector3 delta); /// equivalent of setPosition(position()+delta)
  void moveRelative(const SVector3 delta); /// equivalent of setPosition(position()+orientation*delta)

  void yaw(const Ogre::Radian angle);
  void pitch(const Ogre::Radian angle);
  void roll(const Ogre::Radian angle);

  void setFixedYawAxis(bool useFixed, const SVector3 fixedAxis);


  void setInheritScale(bool inherit);

  void setInheritOrientation(bool inherit);

  void setVisible(bool visible, bool cascade);

  // DEBUG
  void showBoundingBox(bool show);
};

class SMovableObject : public Component {
  public:
    SAxisAlignedBox getBoundingBox() const;
};

class SMesh : public SMovableObject {
 public:
  SMesh();
  SMesh(SString meshname);

  ~SMesh();

  const SString type() const;

  SMesh* clone() const;

  void setMaterialName(SString materialName);

  // ANIMATION
  bool animated() const;
  void setAnimationStateEnabled(SString animstate, bool enabled);
  void setAnimationStateLoop(SString animstate, bool loop);
  void addAnimationTime(SString animstate, SReal time);
};

class SPrimitive : public SMesh {
 public:
  enum PrimitiveType {
    CUBE = Ogre::SceneManager::PT_CUBE,
    SPHERE = Ogre::SceneManager::PT_SPHERE,
    PLANE = Ogre::SceneManager::PT_PLANE
  };
  SPrimitive(PrimitiveType type);

  ~SPrimitive();

  SPrimitive* clone() const;

  const SString type() const;
};

class SCamera : public SMovableObject {
 public:
  SCamera();
  ~SCamera();

  SCamera* clone() const;

  const SString type() const;

  void setNearClipDistance(SReal distance);
  void setAspectRatio(SReal ratio);
  void setPolygonMode(Ogre::PolygonMode polymode);

  void activate();
};

class SLight : public SMovableObject {
 public:
  SLight(Ogre::Light::LightTypes type);

  const SString type() const;

  SLight* clone() const;

  void setDiffuseColour(Ogre::ColourValue diffuse_colour);
  void setSpecularColour(Ogre::ColourValue specular_colour);

  void setAsTerrainLight();
};

class SManualObject : public SMesh {
 public:
  SManualObject(bool isStatic);
  ~SManualObject();

  /// not really cloneable at the moment
  SManualObject* clone() const;

  unsigned int onAdd(SString goname, STransform* transform);

  // ManualObject methods
  void begin(SString materialName, OperationType opType);
  void finish();

  void position(SVector3 pos);
  void colour(SColourValue col);
  void normal(SVector3 normal);
  void tangent(SVector3 tangent);
  /// Add texture coordinate, discards w component (UV only)
  void textureCoord(SVector3 uvw);

  void index(unsigned int ind);
  void triangle(unsigned int ind1, unsigned int ind2, unsigned int ind3);
  void quad(unsigned int ind1, unsigned int ind2, unsigned int ind3, unsigned int ind4);

  void clear();

  enum OperationType {
    OT_POINT_LIST,
    OT_LINE_LIST,
    OT_LINE_STRIP,
    OT_TRIANGLE_LIST,
    OT_TRIANGLE_STRIP,
    OT_TRIANGLE_FAN
  };
};
