namespace std {
class vector {

        TEMPLATE_BIND(T, std::string, SF::GameObject*, SF::Component*)

        void clear();
        int size() const;

        const T& operator[](int index) const;
        T& operator[](int index);
        void push_back(T val);

        vector();
        ~vector();
};

class set {

        TEMPLATE_BIND(T, std::string)

         void clear();
         int size() const;

         //const T& operator[](int index) const;
         //T& operator[](int index);
         //void push_back(T val);

         set();
         ~set();
};

struct pair {
	TEMPLATE_BIND(T1 T2, bool float)
  typedef T1 first_type;
  typedef T2 second_type;

  T1 first;
  T2 second;
  pair() : first(T1()), second(T2()) {}
  pair(const T1& x, const T2& y) : first(x), second(y) {}
  //template <class U, class V> pair (const pair<U,V> &p) : first(p.first), second(p.second) { }
}

// class map {
//
//         TEMPLATE_BIND(T T1, std::string Ember::OgreView::Model::SubModelPart*)
//
//         void clear();
//         int size() const;
//
//         const T& operator[] @ gett(T1 index) const;
//         T& operator[] @ gett(T1  index);
//         //void push_back(T val);
//
//         map();
//         ~map();
// };

// class map {
//
//         TEMPLATE_BIND(K V, std::string Ember::OgreView::Model::SubModelPart*)
//
//         V get_element(K key);
//         void set_element(K key, V value);
//
//         map();
//         ~map();
// };
}
