namespace Ogre {
	/** \addtogroup Core
	*  @{
	*/
	/** \addtogroup Image
	*  @{
	*/

    enum ImageFlags
    {
        IF_COMPRESSED = 0x00000001,
        IF_CUBEMAP    = 0x00000002,
        IF_3D_TEXTURE = 0x00000004
    };
    /** Class representing an image file.
        @remarks
            The Image class usually holds uncompressed image data and is the
            only object that can be loaded in a texture. Image  objects handle
            image data decoding themselves by the means of locating the correct
            Codec object for each data type.
        @par
            Typically, you would want to use an Image object to load a texture
            when extra processing needs to be done on an image before it is
            loaded or when you want to blit to an existing texture.
    */
	class Image
    {
    public:
        /** Standard constructor.
        */
        Image();
        /** Copy-constructor - copies all the data from the target image.
        */
        Image( const Image &img );

        /** Standard destructor.
        */
        virtual ~Image();

        /** Assignment operator - copies all the data from the target image.
        */
        Image & operator = ( const Image & img );

        /** Flips (mirrors) the image around the Y-axis.
            @remarks
                An example of an original and flipped image:
                <pre>
                originalimg
                00000000000
                00000000000
                00000000000
                00000000000
                00000000000
                ------------> flip axis
                00000000000
                00000000000
                00000000000
                00000000000
                00000000000
                originalimg
                </pre>
        */
        Image & flipAroundY();

        /** Flips (mirrors) the image around the X-axis.
            @remarks
                An example of an original and flipped image:
                <pre>
                        flip axis
                            |
                originalimg|gmilanigiro
                00000000000|00000000000
                00000000000|00000000000
                00000000000|00000000000
                00000000000|00000000000
                00000000000|00000000000
                </pre>
        */
        Image & flipAroundX();

        /** Stores a pointer to raw data in memory. The pixel format has to be specified.
            @remarks
                This method loads an image into memory held in the object. The
                pixel format will be either greyscale or RGB with an optional
                Alpha component.
                The type can be determined by calling getFormat().
            @note
				Whilst typically your image is likely to be a simple 2D image,
				you can define complex images including cube maps, volume maps,
				and images including custom mip levels. The layout of the
				internal memory should be:
				<ul><li>face 0, mip 0 (top), width x height (x depth)</li>
				<li>face 0, mip 1, width/2 x height/2 (x depth/2)</li>
				<li>face 0, mip 2, width/4 x height/4 (x depth/4)</li>
				<li>.. remaining mips for face 0 .. </li>
				<li>face 1, mip 0 (top), width x height (x depth)</li
				<li>.. and so on. </li>
				</ul>
				Of course, you will never have multiple faces (cube map) and
				depth too.
			@param
                The data pointer
            @param
				Width of image
            @param
				Height of image
			@param
                Image Depth (in 3d images, numbers of layers, otherwhise 1)
            @param
				Pixel Format
            @param
                if memory associated with this buffer is to be destroyed
				with the Image object. Note: it's important that if you set
				this option to true, that you allocated the memory using OGRE_ALLOC_T
				with a category of MEMCATEGORY_GENERAL ensure the freeing of memory
				matches up.
			@param
				the number of faces the image data has inside (6 for cubemaps, 1 otherwise)
            @param
                the number of mipmaps the image data has inside
            @note
                 The memory associated with this buffer is NOT destroyed with the
                 Image object, unless autoDelete is set to true.
			@remarks
				The size of the buffer must be numFaces*PixelUtil::getMemorySize(width, height, depth, format)
         */

		/** Stores a pointer to raw data in memory. The pixel format has to be specified.
            @remarks
                This method loads an image into memory held in the object. The
                pixel format will be either greyscale or RGB with an optional
                Alpha component.
                The type can be determined by calling getFormat().
            @note
				Whilst typically your image is likely to be a simple 2D image,
				you can define complex images including cube maps
				and images including custom mip levels. The layout of the
				internal memory should be:
				<ul><li>face 0, mip 0 (top), width x height</li>
				<li>face 0, mip 1, width/2 x height/2 </li>
				<li>face 0, mip 2, width/4 x height/4 </li>
				<li>.. remaining mips for face 0 .. </li>
				<li>face 1, mip 0 (top), width x height (x depth)</li
				<li>.. and so on. </li>
				</ul>
				Of course, you will never have multiple faces (cube map) and
				depth too.
            @param
                The data pointer
            @param
				Width of image
            @param
				Height of image
            @param
				Pixel Format
            @note
                 The memory associated with this buffer is NOT destroyed with the
                 Image object.
			@remarks This function is deprecated; one should really use the
				Image::loadDynamicImage(pData, width, height, depth, format, ...) to be compatible
				with future Ogre versions.
         */
		/** Loads raw data from a stream. See the function
			loadDynamicImage for a description of the parameters.
			@remarks
				The size of the buffer must be numFaces*PixelUtil::getMemorySize(width, height, depth, format)
            @note
				Whilst typically your image is likely to be a simple 2D image,
				you can define complex images including cube maps
				and images including custom mip levels. The layout of the
				internal memory should be:
				<ul><li>face 0, mip 0 (top), width x height (x depth)</li>
				<li>face 0, mip 1, width/2 x height/2 (x depth/2)</li>
				<li>face 0, mip 2, width/4 x height/4 (x depth/4)</li>
				<li>.. remaining mips for face 0 .. </li>
				<li>face 1, mip 0 (top), width x height (x depth)</li
				<li>.. and so on. </li>
				</ul>
				Of course, you will never have multiple faces (cube map) and
				depth too.
        */
        /** Loads raw data from a stream. The pixel format has to be specified.
			@remarks This function is deprecated; one should really use the
				Image::loadRawData(stream, width, height, depth, format, ...) to be compatible
				with future Ogre versions.
            @note
				Whilst typically your image is likely to be a simple 2D image,
				you can define complex images including cube maps
				and images including custom mip levels. The layout of the
				internal memory should be:
				<ul><li>face 0, mip 0 (top), width x height</li>
				<li>face 0, mip 1, width/2 x height/2 </li>
				<li>face 0, mip 2, width/4 x height/4 </li>
				<li>.. remaining mips for face 0 .. </li>
				<li>face 1, mip 0 (top), width x height (x depth)</li
				<li>.. and so on. </li>
				</ul>
				Of course, you will never have multiple faces (cube map) and
				depth too.
        */

        /** Loads an image file.
            @remarks
                This method loads an image into memory. Any format for which
				and associated ImageCodec is registered can be loaded.
				This can include complex formats like DDS with embedded custom
				mipmaps, cube faces and volume textures.
                The type can be determined by calling getFormat().
            @param
                strFileName Name of a file file to load.
            @param
                groupName Name of the resource group to search for the image
            @note
                The memory associated with this buffer is destroyed with the
                Image object.
        */
        Image & load( const String& strFileName, const String& groupName );

        /** Loads an image file from a stream.
            @remarks
                This method works in the same way as the filename-based load
                method except it loads the image from a DataStream object.
				This DataStream is expected to contain the
                encoded data as it would be held in a file.
                Any format for which and associated ImageCodec is registered
				can be loaded.
				This can include complex formats like DDS with embedded custom
				mipmaps, cube faces and volume textures.
                The type can be determined by calling getFormat().
            @param
                stream The source data.
            @param
                type The type of the image. Used to decide what decompression
                codec to use. Can be left blank if the stream data includes
				a header to identify the data.
            @see
                Image::load( const String& strFileName )
        */


		/** Utility method to combine 2 separate images into this one, with the first
		image source supplying the RGB channels, and the second image supplying the
		alpha channel (as luminance or separate alpha).
		@param rgbFilename Filename of image supplying the RGB channels (any alpha is ignored)
		@param alphaFilename Filename of image supplying the alpha channel. If a luminance image the
			single channel is used directly, if an RGB image then the values are
			converted to greyscale.
		@param groupName The resource group from which to load the images
		@param format The destination format
		*/
		Image & loadTwoImagesAsRGBA(const String& rgbFilename, const String& alphaFilename,
			const String& groupName, Ogre::PixelFormat format);

		/** Utility method to combine 2 separate images into this one, with the first
		image source supplying the RGB channels, and the second image supplying the
		alpha channel (as luminance or separate alpha).
		@param rgbStream Stream of image supplying the RGB channels (any alpha is ignored)
		@param alphaStream Stream of image supplying the alpha channel. If a luminance image the
			single channel is used directly, if an RGB image then the values are
			converted to greyscale.
		@param format The destination format
		@param rgbType The type of the RGB image. Used to decide what decompression
			codec to use. Can be left blank if the stream data includes
			a header to identify the data.
		@param alphaType The type of the alpha image. Used to decide what decompression
			codec to use. Can be left blank if the stream data includes
			a header to identify the data.
		*/

		/** Utility method to combine 2 separate images into this one, with the first
			image source supplying the RGB channels, and the second image supplying the
			alpha channel (as luminance or separate alpha).
		@param rgb Image supplying the RGB channels (any alpha is ignored)
		@param alpha Image supplying the alpha channel. If a luminance image the
			single channel is used directly, if an RGB image then the values are
			converted to greyscale.
		@param format The destination format
		*/
		Image & combineTwoImagesAsRGBA(const Image& rgb, const Image& alpha, Ogre::PixelFormat format);


        /** Save the image as a file.
		@remarks
			Saving and loading are implemented by back end (sometimes third
			party) codecs.  Implemented saving functionality is more limited
			than loading in some cases.	Particulary DDS file format support
			is currently limited to true colour or single channel float32,
			square, power of two textures with no mipmaps.  Volumetric support
			is currently limited to DDS files.
		*/
        void save(const String& filename);

		/** Encode the image and return a stream to the data.
			@param formatextension An extension to identify the image format
				to encode into, e.g. "jpg" or "png"
		*/

		/** Returns a pointer to the internal image buffer.
		@remarks
			Be careful with this method. You will almost certainly
			prefer to use getOgre::PixelBox, especially with complex images
			which include many faces or custom mipmaps.
        */
        unsigned char* getData(void);

        /** Returns a const pointer to the internal image buffer.
		@remarks
			Be careful with this method. You will almost certainly
			prefer to use getOgre::PixelBox, especially with complex images
			which include many faces or custom mipmaps.
        */
        const unsigned char * getData() const;

        /** Returns the size of the data buffer.
        */
        size_t getSize() const;

        /** Returns the number of mipmaps contained in the image.
        */
        size_t getNumMipmaps() const;

        /** Returns true if the image has the appropriate flag set.
        */
        bool hasFlag(const ImageFlags imgFlag) const;

        /** Gets the width of the image in pixels.
        */
        size_t getWidth(void) const;

        /** Gets the height of the image in pixels.
        */
        size_t getHeight(void) const;

        /** Gets the depth of the image.
        */
        size_t getDepth(void) const;

		/** Get the number of faces of the image. This is usually 6 for a cubemap, and
		    1 for a normal image.
		*/
		size_t getNumFaces(void) const;

        /** Gets the physical width in bytes of each row of pixels.
        */
        size_t getRowSpan(void) const;

        /** Returns the image format.
        */
        Ogre::PixelFormat getFormat() const;

        /** Returns the number of bits per pixel.
        */
        unsigned char getBPP() const;

        /** Returns true if the image has an alpha component.
        */
        bool getHasAlpha() const;

		/** Does gamma adjustment.
            @note
                Basic algo taken from Titan Engine, copyright (c) 2000 Ignacio
                Castano Iguado
        */
        static void applyGamma( unsigned char *buffer, Ogre::Real gamma, size_t size, unsigned char bpp );

        /**
         * Get colour value from a certain location in the image. The z coordinate
         * is only valid for cubemaps and volume textures. This uses the first (largest)
         * mipmap.
         */
        ColourValue getColourAt(int x, int y, int z) const;

        /**
         * Get a Ogre::PixelBox encapsulating the image data of a mipmap
         */
        Ogre::PixelBox getPixelBox(size_t face, size_t mipmap) const;

		/// Delete all the memory held by this image, if owned by this image (not dynamic)
		void freeMemory();

		enum Filter
		{
			FILTER_NEAREST,
			FILTER_LINEAR,
			FILTER_BILINEAR,
			FILTER_BOX,
			FILTER_TRIANGLE,
			FILTER_BICUBIC
		};
		/** Scale a 1D, 2D or 3D image volume.
			@param 	src			Ogre::PixelBox containing the source pointer, dimensions and format
			@param 	dst			Ogre::PixelBox containing the destination pointer, dimensions and format
			@param 	filter		Which filter to use
			@remarks 	This function can do pixel format conversion in the process.
			@note	dst and src can point to the same Ogre::PixelBox object without any problem
		*/
		static void scale(const Ogre::PixelBox &src, const Ogre::PixelBox &dst, Filter filter = FILTER_BILINEAR);

		/** Resize a 2D image, applying the appropriate filter. */
		void resize(unsigned short width, unsigned short height, Filter filter = FILTER_BILINEAR);

    // Static function to calculate size in bytes from the number of mipmaps, faces and the dimensions
    static size_t calculateSize(size_t mipmaps, size_t faces, size_t width, size_t height, size_t depth, Ogre::PixelFormat format);
    };

	//typedef vector<Image*>::type ImagePtrList;
	//typedef vector<const Image*>::type ConstImagePtrList;

	/** @} */
	/** @} */


  // PIXELFORMAT

  enum PixelFormat
    {
        /// Unknown pixel format.
        PF_UNKNOWN = 0,
        /// 8-bit pixel format, all bits luminace.
        PF_L8 = 1,
		PF_BYTE_L = PF_L8,
        /// 16-bit pixel format, all bits luminace.
        PF_L16 = 2,
		PF_SHORT_L = PF_L16,
        /// 8-bit pixel format, all bits alpha.
        PF_A8 = 3,
		PF_BYTE_A = PF_A8,
        /// 8-bit pixel format, 4 bits alpha, 4 bits luminance.
        PF_A4L4 = 4,
		/// 2 byte pixel format, 1 byte luminance, 1 byte alpha
		PF_BYTE_LA = 5,
        /// 16-bit pixel format, 5 bits red, 6 bits green, 5 bits blue.
        PF_R5G6B5 = 6,
		/// 16-bit pixel format, 5 bits red, 6 bits green, 5 bits blue.
        PF_B5G6R5 = 7,
        /// 8-bit pixel format, 2 bits blue, 3 bits green, 3 bits red.
        PF_R3G3B2 = 31,
        /// 16-bit pixel format, 4 bits for alpha, red, green and blue.
        PF_A4R4G4B4 = 8,
        /// 16-bit pixel format, 5 bits for blue, green, red and 1 for alpha.
        PF_A1R5G5B5 = 9,
        /// 24-bit pixel format, 8 bits for red, green and blue.
        PF_R8G8B8 = 10,
        /// 24-bit pixel format, 8 bits for blue, green and red.
        PF_B8G8R8 = 11,
        /// 32-bit pixel format, 8 bits for alpha, red, green and blue.
        PF_A8R8G8B8 = 12,
        /// 32-bit pixel format, 8 bits for blue, green, red and alpha.
        PF_A8B8G8R8 = 13,
        /// 32-bit pixel format, 8 bits for blue, green, red and alpha.
        PF_B8G8R8A8 = 14,
		/// 32-bit pixel format, 8 bits for red, green, blue and alpha.
		PF_R8G8B8A8 = 28,
        /// 32-bit pixel format, 8 bits for red, 8 bits for green, 8 bits for blue
        /// like PF_A8R8G8B8, but alpha will get discarded
        PF_X8R8G8B8 = 26,
        /// 32-bit pixel format, 8 bits for blue, 8 bits for green, 8 bits for red
        /// like PF_A8B8G8R8, but alpha will get discarded
        PF_X8B8G8R8 = 27,
#if OGRE_ENDIAN == OGRE_ENDIAN_BIG
		/// 3 byte pixel format, 1 byte for red, 1 byte for green, 1 byte for blue
		PF_BYTE_RGB = PF_R8G8B8,
		/// 3 byte pixel format, 1 byte for blue, 1 byte for green, 1 byte for red
		PF_BYTE_BGR = PF_B8G8R8,
		/// 4 byte pixel format, 1 byte for blue, 1 byte for green, 1 byte for red and one byte for alpha
		PF_BYTE_BGRA = PF_B8G8R8A8,
		/// 4 byte pixel format, 1 byte for red, 1 byte for green, 1 byte for blue, and one byte for alpha
		PF_BYTE_RGBA = PF_R8G8B8A8,
#else
		/// 3 byte pixel format, 1 byte for red, 1 byte for green, 1 byte for blue
		PF_BYTE_RGB = PF_B8G8R8,
		/// 3 byte pixel format, 1 byte for blue, 1 byte for green, 1 byte for red
		PF_BYTE_BGR = PF_R8G8B8,
		/// 4 byte pixel format, 1 byte for blue, 1 byte for green, 1 byte for red and one byte for alpha
		PF_BYTE_BGRA = PF_A8R8G8B8,
		/// 4 byte pixel format, 1 byte for red, 1 byte for green, 1 byte for blue, and one byte for alpha
		PF_BYTE_RGBA = PF_A8B8G8R8,
#endif
        /// 32-bit pixel format, 2 bits for alpha, 10 bits for red, green and blue.
        PF_A2R10G10B10 = 15,
        /// 32-bit pixel format, 10 bits for blue, green and red, 2 bits for alpha.
        PF_A2B10G10R10 = 16,
        /// DDS (DirectDraw Surface) DXT1 format
        PF_DXT1 = 17,
        /// DDS (DirectDraw Surface) DXT2 format
        PF_DXT2 = 18,
        /// DDS (DirectDraw Surface) DXT3 format
        PF_DXT3 = 19,
        /// DDS (DirectDraw Surface) DXT4 format
        PF_DXT4 = 20,
        /// DDS (DirectDraw Surface) DXT5 format
        PF_DXT5 = 21,
		// 16-bit pixel format, 16 bits (float) for red
        PF_FLOAT16_R = 32,
        // 48-bit pixel format, 16 bits (float) for red, 16 bits (float) for green, 16 bits (float) for blue
        PF_FLOAT16_RGB = 22,
        // 64-bit pixel format, 16 bits (float) for red, 16 bits (float) for green, 16 bits (float) for blue, 16 bits (float) for alpha
        PF_FLOAT16_RGBA = 23,
		// 16-bit pixel format, 16 bits (float) for red
        PF_FLOAT32_R = 33,
        // 96-bit pixel format, 32 bits (float) for red, 32 bits (float) for green, 32 bits (float) for blue
        PF_FLOAT32_RGB = 24,
        // 128-bit pixel format, 32 bits (float) for red, 32 bits (float) for green, 32 bits (float) for blue, 32 bits (float) for alpha
        PF_FLOAT32_RGBA = 25,
		// 32-bit, 2-channel s10e5 floating point pixel format, 16-bit green, 16-bit red
		PF_FLOAT16_GR = 35,
		// 64-bit, 2-channel floating point pixel format, 32-bit green, 32-bit red
		PF_FLOAT32_GR = 36,
		// Depth texture format
		PF_DEPTH = 29,
		// 64-bit pixel format, 16 bits for red, green, blue and alpha
		PF_SHORT_RGBA = 30,
		// 32-bit pixel format, 16-bit green, 16-bit red
		PF_SHORT_GR = 34,
		// 48-bit pixel format, 16 bits for red, green and blue
		PF_SHORT_RGB = 37,
        /// PVRTC (PowerVR) RGB 2 bpp
        PF_PVRTC_RGB2 = 38,
        /// PVRTC (PowerVR) RGBA 2 bpp
        PF_PVRTC_RGBA2 = 39,
        /// PVRTC (PowerVR) RGB 4 bpp
        PF_PVRTC_RGB4 = 40,
        /// PVRTC (PowerVR) RGBA 4 bpp
        PF_PVRTC_RGBA4 = 41,
		// Number of pixel formats currently defined
        PF_COUNT = 42
    };
} // namespace
