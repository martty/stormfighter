/*
-----------------------------------------------------------------------------
This source file is part of OGRE
    (Object-oriented Graphics Rendering Engine)
For the latest info, see http://www.ogre3d.org/

Copyright (c) 2000-2006 Torus Knot Software Ltd
Also see acknowledgements in Readme.html

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place - Suite 330, Boston, MA 02111-1307, USA, or go to
http://www.gnu.org/copyleft/lesser.txt.

You may alternatively use this source under the terms of a specific version of
the OGRE Unrestricted License provided you have obtained such a license from
Torus Knot Software Ltd.
-----------------------------------------------------------------------------
*/

namespace Ogre {


    /** Class representing colour.
	    @remarks
		    Colour is represented as 4 components, each of which is a
		    floating-point value from 0.0 to 1.0.
	    @par
		    The 3 'normal' colour components are red, green and blue, a higher
		    number indicating greater amounts of that component in the colour.
		    The forth component is the 'alpha' value, which represents
		    transparency. In this case, 0.0 is completely transparent and 1.0 is
		    fully opaque.
    */
    class ColourValue
    {
    public:
        static const Ogre::ColourValue ZERO;
        static const Ogre::ColourValue Black;
        static const Ogre::ColourValue White;
        static const Ogre::ColourValue Red;
        static const Ogre::ColourValue Green;
        static const Ogre::ColourValue Blue;

	     ColourValue( float red = 1.0f,
				    float green = 1.0f,
				    float blue = 1.0f,
				    float alpha = 1.0f ) ;


        float r,g,b,a;

	    /** Retrieves colour as RGBA.
	    */
	    unsigned int getAsRGBA(void) const;

	    /** Retrieves colour as ARGB.
	    */
	    unsigned int getAsARGB(void) const;

		/** Retrieves colour as BGRA.
		*/
		unsigned int getAsBGRA(void) const;

		/** Retrieves colours as ABGR */
	    unsigned int getAsABGR(void) const;

	    /** Sets colour as RGBA.
	    */
        void setAsRGBA(const unsigned int val);

	    /** Sets colour as ARGB.
	    */
        void setAsARGB(const unsigned int val);

		/** Sets colour as BGRA.
		*/
		void setAsBGRA(const unsigned int val);

	    /** Sets colour as ABGR.
	    */
        void setAsABGR(const unsigned int val);

        /** Clamps colour value to the range [0, 1].
        */
        void saturate(void);

        /** As saturate, except that this colour value is unaffected and
            the saturated colour value is returned as a copy. */
        Ogre::ColourValue saturateCopy(void) const;

		/// Array accessor operator
//		float operator [] ( const size_t i ) const;

		/// Array accessor operator
//		float& operator [] ( const size_t i )

		/// Pointer accessor for direct copying
		//float* ptr();
		/// Pointer accessor for direct copying
		//const float* ptr() const;

		
		// arithmetic operations
        Ogre::ColourValue operator + ( const Ogre::ColourValue& rkVector ) const;

        Ogre::ColourValue operator - ( const Ogre::ColourValue& rkVector ) const;

//        Ogre::ColourValue operator * (const float fScalar ) const;

//        Ogre::ColourValue operator * ( const Ogre::ColourValue& rhs) const;

        Ogre::ColourValue operator / ( const Ogre::ColourValue& rhs) const;

        Ogre::ColourValue operator / (const float fScalar ) const;

        //Ogre::ColourValue operator * (const float fScalar, const Ogre::ColourValue& rkVector );

        // arithmetic updates
        //Ogre::ColourValue& operator += ( const Ogre::ColourValue& rkVector );

        //Ogre::ColourValue& operator -= ( const Ogre::ColourValue& rkVector );

        //Ogre::ColourValue& operator *= (const float fScalar );

        //Ogre::ColourValue& operator /= (const float fScalar );

		/** Set a colour value from Hue, Saturation and Brightness.
		@param hue Hue value, scaled to the [0,1] range as opposed to the 0-360
		@param saturation Saturation level, [0,1]
		@param brightness Brightness level, [0,1]
		*/
		void setHSB(float hue, float saturation, float brightness);


		/** Function for writing to a stream.
		*/
//		inline _OgreExport friend std::ostream& operator <<
//			( std::ostream& o, const ColourValue& c );

    };

} 
